pipeline {
    agent {
        dockerfile {
            filename "etc/dockerfile.jenkins"
            additionalBuildArgs '--build-arg UID=$(id -u) --build-arg GID=$(id -g)'
            args '--network=ci.network'
        }
    }

    parameters {
        string(defaultValue: 'pialab-back', description: '', name: 'GlobalName')

        string(defaultValue: 'http://ci.libre-informatique.fr:8042/back', description: '', name: 'BackUrl')
        string(defaultValue: 'http://ci.libre-informatique.fr:8042/front', description: '', name: 'FrontUrl')

        string(defaultValue: '/usr/share/pialab-back/public', description: '', name: 'BackDirectory')

        string(defaultValue: '/etc/ssl/pialab.crt', description: '', name: 'BackSSLCertificateFile')
        string(defaultValue: '/etc/ssl/pialab.key', description: '', name: 'BackSSLCertificateKeyFile')

        string(defaultValue: 'test', description: '', name: 'BuildEnv')

        string(defaultValue: '', description: '', name: 'DatabaseName')
        string(defaultValue: '', description: '', name: 'DatabaseUser')
        string(defaultValue: '', description: '', name: 'DatabasePassword')

        string(defaultValue: '', description: '', name: 'DatabaseHost')
        string(defaultValue: '', description: '', name: 'DatabaseRootUser')
        string(defaultValue: '', description: '', name: 'DatabaseRootPassword')

        string(defaultValue: 'smtp://127.0.0.1:1025', description: '', name: 'MailerUrl')

        /* string(defaultValue: 'master', description: '', name: 'BackGitBranch') */

        string(defaultValue: '', description: '', name: 'ClientId')
        string(defaultValue: '', description: '', name: 'ClientSecret')

        choice(choices: 'true\nfalse', description: '', name: 'RunTest')

        choice(choices: 'public\nprivate', description: '', name: 'Repo')
        string(defaultValue: 'Pialab-back', description: '', name: 'Project')

    }


    environment {
        RND = "${BRANCH_NAME}_${BUILD_NUMBER}_"
    }

    options {
        timeout(time: 1, unit: 'HOURS')
        timestamps()
        disableConcurrentBuilds()
        ansiColor('xterm')
    }

    stages {
    	stage ('Where Am I') {
            steps {
                sh "uname -a"
                sh "php -v"
            }
        }

        stage ('Set Env') {
            steps {
                sh "SYMFONYENV=${params.BuildEnv} CLIENTURL=${params.FrontUrl} ./bin/ci-scripts/set_env_with_etcd.sh"
                sh './bin/ci-scripts/set_pgpass.sh'
                sh 'cat ./.env'
                sh 'cat $HOME/.pgpass'
            }
        }

        stage ('Composer Install') {
            steps {
                sh "./bin/ci-scripts/install.sh"
            }
        }

        stage ('Create Database') {
            when {
                expression { params.RunTest == 'true' }
            }

            steps {
                sh "bin/ci-scripts/create_database.sh"
                sh "bin/ci-scripts/create_schema.sh"
            }
        }

        stage ('Add User') {
            when {
                expression { params.RunTest == 'true' }
            }

            steps {
                sh "CLIENTURL=${params.FrontUrl} bin/ci-scripts/create_client_secret.sh"
                sh "bin/ci-scripts/create_user.sh"
            }
        }

        stage ('Install Assets ') {
            steps {
                sh "./bin/ci-scripts/post_install.sh"
            }
        }

        stage ('Start ') {
            when {
                expression { params.RunTest == 'true' }
            }

            steps {
                sh "./bin/ci-scripts/server_start.sh"
            }
        }

        stage ('Run Test') {
             when {
                expression { params.RunTest == 'true' }
             }

            steps {
                sh "./bin/ci-scripts/run_test.sh"
            }
        }

        stage ('Create Archive') {
            steps {
                sh "Name=${params.GlobalName} Branch=${BRANCH_NAME} ./bin/ci-scripts/gen_archive.sh"
                archiveArtifacts artifacts: "*.tar.gz*", fingerprint: true
                build job: 'Copy Artifact', parameters: [string(name: 'Job', value: "${JOB_NAME}"), string(name: 'Project', value: "${params.Project}"), string(name: 'Branch', value: "${BRANCH_NAME}"), string(name: 'DoDeploy', value: "false"), string(name: 'Repo', value: "${LIREPOPATH}/${params.Repo}")], wait: false

            }
        }

    }

    post {
        always {
            publishHTML([allowMissing: true, alwaysLinkToLastBuild: true, keepAll: true, reportDir: 'tests/_output/', reportFiles: 'report.html', reportName: 'Codeception Report', reportTitles: ''])
            cleanWs()
        }
    }

}
